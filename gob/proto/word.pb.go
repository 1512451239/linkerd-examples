// Code generated by protoc-gen-go.
// source: proto/word.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WordRequest struct {
}

func (m *WordRequest) Reset()                    { *m = WordRequest{} }
func (m *WordRequest) String() string            { return proto1.CompactTextString(m) }
func (*WordRequest) ProtoMessage()               {}
func (*WordRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type WordResponse struct {
	Word string `protobuf:"bytes,1,opt,name=word" json:"word,omitempty"`
}

func (m *WordResponse) Reset()                    { *m = WordResponse{} }
func (m *WordResponse) String() string            { return proto1.CompactTextString(m) }
func (*WordResponse) ProtoMessage()               {}
func (*WordResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func init() {
	proto1.RegisterType((*WordRequest)(nil), "proto.WordRequest")
	proto1.RegisterType((*WordResponse)(nil), "proto.WordResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for WordSvc service

type WordSvcClient interface {
	GetWord(ctx context.Context, in *WordRequest, opts ...grpc.CallOption) (*WordResponse, error)
}

type wordSvcClient struct {
	cc *grpc.ClientConn
}

func NewWordSvcClient(cc *grpc.ClientConn) WordSvcClient {
	return &wordSvcClient{cc}
}

func (c *wordSvcClient) GetWord(ctx context.Context, in *WordRequest, opts ...grpc.CallOption) (*WordResponse, error) {
	out := new(WordResponse)
	err := grpc.Invoke(ctx, "/proto.WordSvc/GetWord", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WordSvc service

type WordSvcServer interface {
	GetWord(context.Context, *WordRequest) (*WordResponse, error)
}

func RegisterWordSvcServer(s *grpc.Server, srv WordSvcServer) {
	s.RegisterService(&_WordSvc_serviceDesc, srv)
}

func _WordSvc_GetWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordSvcServer).GetWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WordSvc/GetWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordSvcServer).GetWord(ctx, req.(*WordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WordSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.WordSvc",
	HandlerType: (*WordSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWord",
			Handler:    _WordSvc_GetWord_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor1 = []byte{
	// 121 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0xcf, 0x2f, 0x4a, 0xd1, 0x03, 0x33, 0x85, 0x58, 0xc1, 0x94, 0x12, 0x2f, 0x17,
	0x77, 0x38, 0x50, 0x30, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x49, 0x89, 0x8b, 0x07, 0xc2,
	0x2d, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0x12, 0xe2, 0x62, 0x01, 0xe9, 0x91, 0x60, 0x54, 0x60,
	0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x8d, 0xec, 0xb9, 0xd8, 0x41, 0x6a, 0x82, 0xcb, 0x92, 0x85, 0x4c,
	0xb8, 0xd8, 0xdd, 0x53, 0x4b, 0x40, 0x3c, 0x21, 0x21, 0x88, 0xb9, 0x7a, 0x48, 0xa6, 0x49, 0x09,
	0xa3, 0x88, 0x41, 0x8c, 0x54, 0x62, 0x48, 0x62, 0x03, 0x8b, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x0c, 0x09, 0x5d, 0xd3, 0x95, 0x00, 0x00, 0x00,
}
