// Code generated by protoc-gen-go.
// source: proto/gen/gen.proto
// DO NOT EDIT!

/*
Package gen is a generated protocol buffer package.

It is generated from these files:
	proto/gen/gen.proto

It has these top-level messages:
	GenRequest
	GenResponse
*/
package gen

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GenRequest struct {
	Text  string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	Limit int32  `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
}

func (m *GenRequest) Reset()         { *m = GenRequest{} }
func (m *GenRequest) String() string { return proto.CompactTextString(m) }
func (*GenRequest) ProtoMessage()    {}

type GenResponse struct {
	Text string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
}

func (m *GenResponse) Reset()         { *m = GenResponse{} }
func (m *GenResponse) String() string { return proto.CompactTextString(m) }
func (*GenResponse) ProtoMessage()    {}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for GenSvc service

type GenSvcClient interface {
	Gen(ctx context.Context, in *GenRequest, opts ...grpc.CallOption) (GenSvc_GenClient, error)
}

type genSvcClient struct {
	cc *grpc.ClientConn
}

func NewGenSvcClient(cc *grpc.ClientConn) GenSvcClient {
	return &genSvcClient{cc}
}

func (c *genSvcClient) Gen(ctx context.Context, in *GenRequest, opts ...grpc.CallOption) (GenSvc_GenClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GenSvc_serviceDesc.Streams[0], c.cc, "/gen.GenSvc/Gen", opts...)
	if err != nil {
		return nil, err
	}
	x := &genSvcGenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GenSvc_GenClient interface {
	Recv() (*GenResponse, error)
	grpc.ClientStream
}

type genSvcGenClient struct {
	grpc.ClientStream
}

func (x *genSvcGenClient) Recv() (*GenResponse, error) {
	m := new(GenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GenSvc service

type GenSvcServer interface {
	Gen(*GenRequest, GenSvc_GenServer) error
}

func RegisterGenSvcServer(s *grpc.Server, srv GenSvcServer) {
	s.RegisterService(&_GenSvc_serviceDesc, srv)
}

func _GenSvc_Gen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GenSvcServer).Gen(m, &genSvcGenServer{stream})
}

type GenSvc_GenServer interface {
	Send(*GenResponse) error
	grpc.ServerStream
}

type genSvcGenServer struct {
	grpc.ServerStream
}

func (x *genSvcGenServer) Send(m *GenResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _GenSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gen.GenSvc",
	HandlerType: (*GenSvcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Gen",
			Handler:       _GenSvc_Gen_Handler,
			ServerStreams: true,
		},
	},
}
